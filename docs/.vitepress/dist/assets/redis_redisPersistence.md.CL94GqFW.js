import{_ as s,c as i,o as a,a1 as n}from"./chunks/framework.DCKU21so.js";const l="/assets/image-20240316211219933.6GQ0r6DS.png",o=JSON.parse('{"title":"redis持久化","description":"","frontmatter":{},"headers":[],"relativePath":"redis/redisPersistence.md","filePath":"redis/redisPersistence.md"}'),t={name:"redis/redisPersistence.md"},p=n('<h1 id="redis持久化" tabindex="-1">redis持久化 <a class="header-anchor" href="#redis持久化" aria-label="Permalink to &quot;redis持久化&quot;">​</a></h1><p>所谓持久化，就是将内存中的数据刷写到本地，达到持久化和数据恢复的目的</p><p>在Redis中，有RDB快照(snapshotting)和AOF(appendonly-file)两种持久化方式</p><h2 id="rdb" tabindex="-1">RDB <a class="header-anchor" href="#rdb" aria-label="Permalink to &quot;RDB&quot;">​</a></h2><p>想要触发持久化的动作有两种方式，分别是手动触发和自动触发。</p><p>但无论如何触发，都是以覆盖写的形式写入到同一份RDB文件中，即RDB的形式，持久化文件都只有一份，比较方便管理。</p><h3 id="手动触发持久化" tabindex="-1">手动触发持久化 <a class="header-anchor" href="#手动触发持久化" aria-label="Permalink to &quot;手动触发持久化&quot;">​</a></h3><ul><li><code>save</code>，同步命令，也就是该命令会占用Redis的主进程，在<code>save</code>命令执行期间，Redis将会阻塞所有的客户端请求，所以，当数据量非常大使，不推荐使用该命令。</li><li><code>bgsave</code>，异步命令，Redis使用Linux的<code>fork()</code>生成一个子进程来做持久化的工作，而主进程则继续提供其他服务。（推荐）</li></ul><p><img src="'+l+`" alt="image-20240316211219933"></p><p>手动触发这里只需要在配置文件中配置（注意配置读写权限）</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/data/redis6379/&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   # 持久化文件保存的目录，目录位置可以更改为其它目录</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dbfilename</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> redis6379.rdb</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   	 # 持久化文件名，可以带端口号也可以不带，文件名也可以随意，只要是.rdb结尾就行</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 执行命令</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /data/redis6379/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">chmod</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 777</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /data/redis6379</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vim</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /opt/redis6379/conf/redis6379.conf</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 添加如下配置</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/data/redis6379/&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dbfilename</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> redis6379.rdb</span></span></code></pre></div><p>模拟操作：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">redis-cli</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> k1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">redis-cli</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> k2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">redis-cli</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> k3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v3</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">redis-cli</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> SAVE</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">redis-cli</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> k4</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v4</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">redis-cli</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> k5</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v5</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">redis-cli</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> keys</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\*</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pkill</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -9</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> redis</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> redis</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">redis-cli</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> keys</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[root@cs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]# redis-cli set k1 v1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OK</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[root@cs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]# redis-cli set k2 v2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OK</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[root@cs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]# redis-cli set k3 v3</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OK</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[root@cs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]# redis-cli SAVE</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OK</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[root@cs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]# redis-cli set k4 v4</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OK</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[root@cs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]# redis-cli set k5 v5</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OK</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[root@cs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]# redis-cli keys </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\*</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;k1&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;k4&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;k2&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;k5&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;k3&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[root@cs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]# pkill -9 redis</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[root@cs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]# systemctl start redis</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[root@cs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]# redis-cli keys </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\*</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;k2&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;k3&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;k1&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 丢了两条数据</span></span></code></pre></div><p><code>save</code>和<code>bgsave</code>对比：</p><table><thead><tr><th style="text-align:left;">命令</th><th style="text-align:left;">save</th><th style="text-align:left;">bgsave</th></tr></thead><tbody><tr><td style="text-align:left;">I/O类型</td><td style="text-align:left;">同步</td><td style="text-align:left;">异步</td></tr><tr><td style="text-align:left;">是否阻塞</td><td style="text-align:left;">是</td><td style="text-align:left;">是(阻塞发生在fock()阶段，但通常非常快)</td></tr><tr><td style="text-align:left;">复杂度</td><td style="text-align:left;">O(n)</td><td style="text-align:left;">O(n)</td></tr><tr><td style="text-align:left;">优点</td><td style="text-align:left;">不会消耗额外的内存</td><td style="text-align:left;">不阻塞客户端命令</td></tr><tr><td style="text-align:left;">缺点</td><td style="text-align:left;">阻塞客户端命令</td><td style="text-align:left;">需要fork子进程，消耗额外内存</td></tr></tbody></table><p><strong>生产中一般不会使用上述两个命令，而是使用自动触发机制。</strong></p><h3 id="自动触发持久化" tabindex="-1">自动触发持久化 <a class="header-anchor" href="#自动触发持久化" aria-label="Permalink to &quot;自动触发持久化&quot;">​</a></h3><p>自动触发需要在配置文件中配置相关触发规则。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># RDB 自动持久化规则，当满足一下任意一个条件时，自动触发bgsave进行持久化</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 当然，你也可以自定义其它规则，比如 save 30 100 </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 当 900 秒内至少有 1 个key 被改动时，自动执行持久化操作</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">save</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 900</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 当 300 秒内至少有 10 个key 被改动时，自动执行持久化操作</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">save</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 300</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 当 60 秒内至少有 10000 个key被改动时，自动执行持久化操作</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">save</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 60</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10000</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 数据持久化文件存储目录</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/data/redis6379/&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># RDB持久化文件名</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dbfilename</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> redis.rdb</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       # 持久化文件名，可以带端口号也可以不带，文件名也可以随意，只要是.rdb结尾就行</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># bgsave过程中发生错误时，是否停止写入，通常为 yes</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rdbcompression</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yes</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 是否对RDB文件进行校验，通常为 yes</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rdbchecksum</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yes</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 最终拷贝这些命令到配置文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vim</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /opt/redis6379/conf/redis6379.conf</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/data/redis6379/&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dbfilename</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> redis.rdb</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">save</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 900</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">save</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 300</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">save</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 60</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10000</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rdbcompression</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yes</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rdbchecksum</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yes</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 重启redis</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> restart</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> redis</span></span></code></pre></div><p>当你用下面三种方式关闭Redis服务，都会在进程退出之前，自动执行一次bgsave之后，再退出</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SHUTDOWN</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">kill</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2490</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		# 2490是redis进程id</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pkill</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> redis</span></span></code></pre></div><p>另外，当只配置了RDB的持久化时，重启Redis服务时，会自动读取RDB文件进行数据恢复。</p><h4 id="关于kill-pkill-pkill-9-shutdown的补充" tabindex="-1"><strong>关于kill/pkill/pkill -9/shutdown的补充</strong> <a class="header-anchor" href="#关于kill-pkill-pkill-9-shutdown的补充" aria-label="Permalink to &quot;**关于kill/pkill/pkill -9/shutdown的补充**&quot;">​</a></h4><p>kill 是指定进程ID杀死进程，其实默认参数是发送-15信号，即通知进程退出，进程在退出之前可以清理并释放资源。 pkill 是指定进程名杀死进程，也是默认发送发送-15信号，即通知进程退出，进程在退出之前可以清理并释放资源。 而-9参数则是直接强制杀死进程。</p><p>那么在redis中，你可以通过kill和pkill或者shutdown来关闭redis，那么背后其实都是通知进程退出，而退出前，redis则是会自动执行下bgsave，拍个快照保存数据到本地。</p><p>如果是用<code>pkill -9 redis</code>则是直接干掉了redis进程，不会触发bgsave命令，那么丢数据也就不足为奇了。</p><p>所以，在生产中使用redis，不要用<code>-9</code>参数。</p><h2 id="aof" tabindex="-1">AOF <a class="header-anchor" href="#aof" aria-label="Permalink to &quot;AOF&quot;">​</a></h2><p>RDB持久化并不是完美的，如果Redis因为某些原因造成了宕机，那么将会丢失最近写入、但并未保存到快照中的数据。 在Redis1.1开始，增加了AOF来补充RDB的不足。 AOF持久化的工作机制是，每当Redis执行修改数据集的命令时，这个命令就会被追加到AOF文件的末尾。数据恢复时重放这个AOF文件即可恢复数据。</p><p>主要参数:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 是否开启aof，默认是no</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">appendonly</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> no</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 触发持久化的条件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">appendfsync</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> always/everyesc/no</span></span></code></pre></div><p>其中：</p><ul><li><code>appendonly</code>：是(<code>yes</code>)否(<code>no</code>)开启AOF持久化，默认<code>no</code>。</li><li><code>appendsync</code>：触发持久化的条件，有下面三种选项： <ul><li><code>always</code>：每当修改数据集都会记录，慢但非常安全。</li><li><code>everysec</code>：每秒钟fync一次，足够快（和使用 RDB 持久化差不多），就算有故障时也只会丢失 1 秒钟的数据。推荐（并且也是默认）使用该策略， 这种 fsync 策略可以兼顾速度和安全性。</li><li><code>no</code>：由操作系统来决定什么时候同步数据，这个选项不常用。</li></ul></li></ul><h3 id="aof重写机制" tabindex="-1">AOF重写机制 <a class="header-anchor" href="#aof重写机制" aria-label="Permalink to &quot;AOF重写机制&quot;">​</a></h3><p>因为AOF会一直将命令追加到文件末尾，导致该文件的体积会越来越大，而且它会保存一些重复性的命令，而这些重复性的命令可以用一条或者极少的命令就能替代.... 为了优化这种情况，Redis支持：在不妨碍正常处理客户端请求中，对AOF文件进行重建(rebuild)，也就是执行<code>bgrewriteaof</code>命令，会生成一个新的AOF文件，这个文件包含重建当前数据集所需要的最少命令。 在Redis2.2版本之前，需要手动执行<code>bgrewriteaof</code>命令，该命令会异步执行一个AOF文件重写操作，重写时会创建一个当前AOF文件的优化版本，即使<code>bgrewriteaof</code>执行失败，也不会有任何数据丢失，因为旧的AOF文件在<code>bgrewriteaof</code>执行成功之前不会被修改和覆盖。 到了Redis2.4则开始支持配置自动触发AOF重写机制了。 AOF重写机制的特点：减少AOF文件对磁盘的空间占用；加速数据恢复。</p><p>举例（伪文件）：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">redis-cli</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	 	aof记录</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	 	   redis⾥的数据</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> k1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 		set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> k1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> k1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">		k1/v1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> k2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 		set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> k1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">		k1/v1</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		 		set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> k2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">		k2/v2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> k3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 		set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> k1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">		k1/v1</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		 		set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> k2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">		k2/v2</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		 		set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> k3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 		k3/v3</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">del</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> k1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">			set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> k1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">		k2/v2</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">				set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> k2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">		k3/v3</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">				set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> k3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v3</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">				del</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> k1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">del</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> k2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">			set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> k1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">		k3/v3</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">				set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> k2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v2</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">				set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> k3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v3</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">				del</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> k1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">				del</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> k2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 问题来了，此时aof中，有意义的记录只有一条：</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">				set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> k3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v3</span></span></code></pre></div><p>所以，对于aof文件特别大的话， 类似于这种情况会很多，所以要进行重写，把无效的命令精简掉。</p><p>其它参数：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 是否开启aof，默认是no</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">appendonly</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> no</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 触发持久化的条件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">appendfsync</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> always/everyesc/no</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 数据持久化文件存储目录，如果单独使用aof，那么配置项就需要加上dir，如果同时使用了rdb，有了dir参数，aof这里则直接指定文件名即可</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/data/redis_data/6379&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 是否在执行重写时不同步数据到AOF文件</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 这里的 yes，就是执行重写时不同步数据到AOF文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">no-appendfsync-on-rewrite</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yes</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 触发AOF文件执行重写的最小尺寸，如果将来真的用这个参数，且重度使用redis，则这个64兆就太小了，你可以调整以G为单位</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">auto-aof-rewrite-min-size</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 64mb</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 触发AOF文件执行重写的增长率</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">auto-aof-rewrite-percentage</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># aof文件保存位置,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># dir &quot;/data/redis6379/&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">appendfilename</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;redis.aof&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 最终拷贝这些命令到配置文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vim</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /opt/redis6379/conf/redis6379.conf</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">appendonly</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yes</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">appendfsync</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> everysec</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">appendfilename</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;redis.aof&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">auto-aof-rewrite-percentage</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">auto-aof-rewrite-min-size</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 64mb</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">no-appendfsync-on-rewrite</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yes</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 重启redis</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> restart</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> redis</span></span></code></pre></div><p>关于AOF重写，当AOF文件的体积大于64Mb，并且AOF文件的体积比上一次重时的体积大了至少一倍（100%）时，Redis将执行 <code>bgrewriteaof </code>命令进行重写，当然这个命令也能手动执行。</p><h3 id="rdb和aof的优先级" tabindex="-1">RDB和AOF的优先级 <a class="header-anchor" href="#rdb和aof的优先级" aria-label="Permalink to &quot;RDB和AOF的优先级&quot;">​</a></h3><p>当AOF和RDB同时存在的时候，redis会优先读取AOF的数据进行恢复。</p><h3 id="aof中设置了过期时间的key-redis重启会如何处理" tabindex="-1">AOF中设置了过期时间的key，Redis重启会如何处理？ <a class="header-anchor" href="#aof中设置了过期时间的key-redis重启会如何处理" aria-label="Permalink to &quot;AOF中设置了过期时间的key，Redis重启会如何处理？&quot;">​</a></h3><p>Redis启动过程中，再根据aof文件恢复数据时，遇到过期的key，会校验一下是否过期，如果过期了，就按照过期处理</p><h4 id="aof的优点" tabindex="-1"><strong>AOF的优点</strong> <a class="header-anchor" href="#aof的优点" aria-label="Permalink to &quot;**AOF的优点**&quot;">​</a></h4><ul><li>使用AOF 会让你的Redis更加耐久: 你可以使用不同的fsync策略：每次写的时候fsync。使用默认的每秒fsync策略，Redis的性能依然很好(fsync是由后台线程进行处理的，主线程会尽力处理客户端请求)，一旦出现故障，你最多丢失1秒的数据。</li><li>AOF文件是一个只进行追加的日志文件，即使由于某些原因(磁盘空间已满，写的过程中宕机等等)未执行完整的写入命令，你也也可使用redis-check-aof工具修复这些问题。（实际并不好用）</li><li>Redis 可以在 AOF 文件体积变得过大时，自动地在后台对 AOF 进行重写： 重写后的新 AOF 文件包含了恢复当前数据集所需的最小命令集合。 整个重写操作是绝对安全的，因为 Redis 在创建新 AOF 文件的过程中，会继续将命令追加到现有的 AOF 文件里面，即使重写过程中发生停机，现有的 AOF 文件也不会丢失。 而一旦新 AOF 文件创建完毕，Redis 就会从旧 AOF 文件切换到新 AOF 文件，并开始对新 AOF 文件进行追加操作。</li><li>AOF 文件有序地保存了对数据库执行的所有写入操作， 这些写入操作以 Redis 协议的格式保存， 因此 AOF 文件的内容非常容易被人读懂， 对文件进行分析（parse）也很轻松。 导出（export） AOF 文件也非常简单： 举个例子， 如果你不小心执行了 FLUSHALL 命令， 但只要 AOF 文件未被重写， 那么只要停止服务器， 移除 AOF 文件末尾的 FLUSHALL 命令， 并重启 Redis ， 就可以将数据集恢复到 FLUSHALL 执行之前的状态。</li></ul><h4 id="aof的缺点" tabindex="-1"><strong>AOF的缺点</strong> <a class="header-anchor" href="#aof的缺点" aria-label="Permalink to &quot;**AOF的缺点**&quot;">​</a></h4><ul><li>对于相同的数据集来说，AOF 文件的体积通常要大于 RDB 文件的体积。</li></ul><h2 id="rdb和aof对比" tabindex="-1">RDB和AOF对比： <a class="header-anchor" href="#rdb和aof对比" aria-label="Permalink to &quot;RDB和AOF对比：&quot;">​</a></h2><table><thead><tr><th style="text-align:left;">选项</th><th style="text-align:left;">RDB</th><th style="text-align:left;">AOF</th></tr></thead><tbody><tr><td style="text-align:left;">数据恢复优先级</td><td style="text-align:left;">低</td><td style="text-align:left;">高</td></tr><tr><td style="text-align:left;">体积</td><td style="text-align:left;">小</td><td style="text-align:left;">大</td></tr><tr><td style="text-align:left;">恢复速度</td><td style="text-align:left;">快</td><td style="text-align:left;">慢</td></tr><tr><td style="text-align:left;">数据安全性</td><td style="text-align:left;">丢数据</td><td style="text-align:left;">根据策略决定</td></tr></tbody></table><p>那么AOF和RDB这两种持久化方式，在生产中，该怎么用呢？</p><ul><li>官方推荐两个都启用，如果是主从环境，可以主库只开启aof，从库只开rdb做备份。</li><li>如果对数据不敏感，可以选单独用RDB。</li><li>不建议单独用 AOF，因为可能会出现Bug。</li><li>如果只是做纯内存缓存，可以都不用。</li></ul><p>性能建议：</p><ul><li>因为RDB文件通常只用作后备用途，如果是主从环境，建议只在Slave上持久化RDB文件，而且只要15分钟备份一次就够了，只保留save 900 1这条规则。</li><li>代价,一是带来了持续的IO，二是AOF rewrite的最后将rewrite过程中产生的新数据写到新文件造成的阻塞几乎是不可避免的。</li><li>只要硬盘许可，应该尽量减少AOF rewrite的频率，AOF重写的基础大小默认值64M太小了，可以设到5G以上。</li><li>默认超过原大小100%大小时重写可以改到适当的数值。</li></ul><p>最后，如果同时配置了RDB和AOF，那么在数据恢复时，Redis会优先选择AOF文件进行数据恢复，如果你就想使用RDB恢复怎么办？可以在配置文件中先把AOF关闭，然后重启Redis，恢复完数据，在线开启AOF即可</p>`,56),e=[p];function h(k,d,F,r,g,y){return a(),i("div",null,e)}const C=s(t,[["render",h]]);export{o as __pageData,C as default};

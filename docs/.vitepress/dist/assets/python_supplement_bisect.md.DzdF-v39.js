import{_ as s,c as i,o as t,a1 as a}from"./chunks/framework.DCKU21so.js";const n="/assets/image-20240512145030407.DKiLMp_X.png",_=JSON.parse('{"title":"bisect模块","description":"","frontmatter":{},"headers":[],"relativePath":"python/supplement/bisect.md","filePath":"python/supplement/bisect.md"}'),e={name:"python/supplement/bisect.md"},p=a(`<h1 id="bisect模块" tabindex="-1">bisect模块 <a class="header-anchor" href="#bisect模块" aria-label="Permalink to &quot;bisect模块&quot;">​</a></h1><p>在Python中，如果我们想维持一个已排序的序列，可以使用内置的<code>bisect</code>模块，例如：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bisect</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 用于处理已排序的序列</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">inter_list </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bisect.insort(inter_list, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bisect.insort(inter_list, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bisect.insort(inter_list, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bisect.insort(inter_list, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bisect.insort(inter_list, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(inter_list)	</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># [1, 2, 3, 5, 6]</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(bisect.bisect(inter_list, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))		</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 3</span></span></code></pre></div><p><code>bisect</code>内部使用二分查找算法来添加数据</p><p>默认使用<code>insort_right</code>函数（如果有两个相同数据，新数据添加到老数据右边），而<code>insort_right</code>内部调用的是<code>bisect_right</code>函数来实现二分查找算法</p><p><img src="`+n+'" alt="image-20240512145030407"></p><p>如果需要查找，可以使用<code>bisect</code>函数，默认调用的也是<code>bisect_right</code>函数</p>',7),h=[p];function l(k,r,c,d,E,o){return t(),i("div",null,h)}const y=s(e,[["render",l]]);export{_ as __pageData,y as default};

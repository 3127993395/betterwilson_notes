import{_ as s,c as a,o as i,a3 as n}from"./chunks/framework.D5qxx6u8.js";const e="/assets/image-20240519124855291.BhYtloJ_.png",p="/assets/image-20240519125723241.6dwz4Va8.png",t="/assets/image-20240519130206298.DSiKswkr.png",h="/assets/image-20240525191340325.CeBfzjKU.png",l="/assets/image-20240519131239180.7PFmgf62.png",d="/assets/image-20240519131336481.D2dSbYz_.png",o="/assets/image-20240519132408154.C5McFFZv.png",b=JSON.parse('{"title":"Django自定义命令","description":"","frontmatter":{},"headers":[],"relativePath":"django/DjangoManage.md","filePath":"django/DjangoManage.md"}'),k={name:"django/DjangoManage.md"},r=n(`<h1 id="django自定义命令" tabindex="-1">Django自定义命令 <a class="header-anchor" href="#django自定义命令" aria-label="Permalink to &quot;Django自定义命令&quot;">​</a></h1><p>我们知道，Django内部内置了很多命令，例如</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> manage.py</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> runserver</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> manage.py</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> makemigrations</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> manage.py</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> migrate</span></span></code></pre></div><p>我们可以在python控制台中查看所有命令</p><p><img src="`+e+`" alt="image-20240519124855291"></p><p>我们也可以自定义命令，让<code>python manage.py</code>执行</p><ul><li>在已注册的app中创建指定的文件夹<code>management</code>和二级文件夹<code>commands</code>(文件夹名称固定)</li><li>在文件夹<code>commands</code>中创建文件<code>wilson.py</code>，命令就为<code>python manage.py wilson</code></li></ul><p>在<code>wilson.py</code>文件中，我们需要写一个<code>Command</code>类，继承<code>BaseCommand</code>，并重写<code>handle()</code>方法</p><p>当我们执行<code>python manage.py wilson</code>时，具体的操作就在<code>handle()</code>方法中</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> django.core.management.base </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BaseCommand</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Command</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BaseCommand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">args, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">options):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;wilson&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><img src="`+p+`" alt="image-20240519125723241"></p><p>在其父类<code>BaseCommand</code>中，有一个<code>add_arguments</code>方法，可以支持我们解析命令后的参数（字典形式）</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> django.core.management.base </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BaseCommand</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Command</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BaseCommand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">args, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">options):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;wilson&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, options)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add_arguments</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, parser):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        parser.add_argument(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;v1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        parser.add_argument(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;v2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><img src="`+t+'" alt="image-20240519130206298"></p><p>我们也可以为每个参数添加解释，让用户知道参数的作用（可以通过<code>python manage.py wilson -h</code>获取解释信息）</p><p><img src="'+h+'" alt="image-20240525191340325"></p><h3 id="关于python-manage-py-createsuperuser命令" tabindex="-1">关于<code>python manage.py createsuperuser</code>命令 <a class="header-anchor" href="#关于python-manage-py-createsuperuser命令" aria-label="Permalink to &quot;关于`python manage.py createsuperuser`命令&quot;">​</a></h3><p>在django中的auth-app中，有一个<code>createsupersuer.py</code>文件</p><p><img src="'+l+'" alt="image-20240519131239180"></p><p>在其初始化方法中，执行函数<code>get_user_model()</code>，本质上是去寻找每个app中的model类，并读取配置文件中的<code>AUTH_USER_MODEL = &quot;auth.User&quot;</code>，也就是auth中的User表</p><p><img src="'+d+'" alt="image-20240519131336481"></p><p>然后去寻找<code>USERNAME_FIELD</code>字段，也就是配置文件中定义的<code>&quot;username&quot;</code></p><p>在其<code>handle()</code>函数中，主要执行提示信息和接受我们输入的用户名，密码，邮箱</p><p><img src="'+o+'" alt="image-20240519132408154"></p><p>在其最后执行了</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.UserModel._default_manager.db_manager(database).create_superuser(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">user_data)</span></span></code></pre></div><p>本质上就是执行了内部的自定义命令<code>create_superuser</code>来创建超级用户</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">User.objects.create_superuser(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">user_data)</span></span></code></pre></div><p>注：其中<code>db_manager(database)</code>用来选择数据库，默认是<code>default</code></p>',29),g=[r];function c(E,y,m,u,F,_){return i(),a("div",null,g)}const B=s(k,[["render",c]]);export{b as __pageData,B as default};

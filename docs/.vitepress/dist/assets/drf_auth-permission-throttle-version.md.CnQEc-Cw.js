import{_ as s,c as i,o as a,a1 as n}from"./chunks/framework.DCKU21so.js";const t="/assets/image-20220903102113338.CSYVUWLC.png",e="/assets/image-20240501153451481.CVXwlSmZ.png",h="/assets/image-20240501121218606.BG7x5yZH.png",p="/assets/image-20240501121814393.qughFRfz.png",l="/assets/image-20240501122300016.QBeNZDPL.png",k="/assets/image-20240501123746747.CmBxYzoa.png",r="/assets/image-20240501124034380.B38DzAi7.png",d="/assets/image-20240501124519485.XXoSLHRm.png",o="/assets/image-20240501124701677.C8JcbzOQ.png",E="/assets/image-20210819150601089.DtaFOw2A.png",g="/assets/image-20240501125645869.q4kJhpv_.png",c="/assets/image-20240501140713358.D3z0LNwf.png",y="/assets/image-20240501141250592.BVoFtXmC.png",u="/assets/image-20240501133058471.Bt9UtYKO.png",F="/assets/image-20240501133711825.BacW0GBo.png",m="/assets/image-20240501134846789.D-bGmM7t.png",q="/assets/image-20240501162055511.CP6DTR3_.png",_="/assets/image-20240501154905696.BJq4LQqh.png",C="/assets/image-20240501155055984.BpmCoLr3.png",b="/assets/image-20240501155423437.ChJkr4Pt.png",f="/assets/image-20240501164709247.C43cCCYl.png",B="/assets/image-20240502091541849.tEw2b-re.png",A="/assets/image-20240502090507786.DMtkBF73.png",D="/assets/image-20240502104742468.Bl7xq1Ul.png",v="/assets/image-20240502104821087.BvExIsV4.png",x="/assets/image-20240502091925735.CbVWXN1a.png",P="/assets/image-20240502102914790.p6Yau4_j.png",w="/assets/image-20240502104319930.CBM3N-_g.png",R="/assets/image-20240502105555121.BZPnQTHN.png",V="/assets/image-20240502105901409.oJyEcrE1.png",T="/assets/image-20210820105543193.BjQO4lxi.png",j="/assets/image-20240502110650845.ofJDgtiH.png",S="/assets/image-20240502110937054.Nxo8kqbG.png",L="/assets/image-20240502113926511.Tjd8UCjn.png",N="/assets/image-20210820105543193.BjQO4lxi.png",I="/assets/image-20210820112152615.B8iW82DS.png",K=JSON.parse('{"title":"drf认证，权限，限流，版本","description":"","frontmatter":{},"headers":[],"relativePath":"drf/auth-permission-throttle-version.md","filePath":"drf/auth-permission-throttle-version.md"}'),U={name:"drf/auth-permission-throttle-version.md"},O=n('<h1 id="drf认证-权限-限流-版本" tabindex="-1">drf认证，权限，限流，版本 <a class="header-anchor" href="#drf认证-权限-限流-版本" aria-label="Permalink to &quot;drf认证，权限，限流，版本&quot;">​</a></h1><h2 id="_1-前后端分离" tabindex="-1">1.前后端分离 <a class="header-anchor" href="#_1-前后端分离" aria-label="Permalink to &quot;1.前后端分离&quot;">​</a></h2><p><img src="'+t+`" alt="image-20220903102113338"></p><h2 id="_2-fbv和cbv" tabindex="-1">2.FBV和CBV <a class="header-anchor" href="#_2-fbv和cbv" aria-label="Permalink to &quot;2.FBV和CBV&quot;">​</a></h2><ul><li><p>FBV，function base views，其实就是编写函数来处理业务请求。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> django.urls </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> path</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> app01 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> views</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">urlpatterns </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    path(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;users/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, views.users),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> django.http </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> JsonResponse</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> users</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(request, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">args, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kwargs):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> request.method </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;GET&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> JsonResponse({</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;code&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;data&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;xxx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    elif</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> request.method </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;POST&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> JsonResponse({</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;code&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;data&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;xxx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    ...</span></span></code></pre></div></li><li><p>CBV，class base views，其实就是编写类来处理业务请求。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> django.urls </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> path</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> app01 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> views</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">urlpatterns </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    path(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;users/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, views.UserView.as_view()),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> django.views </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, request, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">args, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kwargs):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> JsonResponse({</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;code&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;data&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;xxx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, request, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">args, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kwargs):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> JsonResponse({</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;code&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;data&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;xxx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div></li></ul><p>CBV可以通过<code>GET</code>和<code>POST</code>轻松区分两种方法，其实CBV和FBV的底层实现本质上相同的。</p><p>前后端不分离项目常见用FBV</p><p>DRF项目两种模式都支持，常见使用CBV</p><h2 id="_3-drf" tabindex="-1">3.drf <a class="header-anchor" href="#_3-drf" aria-label="Permalink to &quot;3.drf&quot;">​</a></h2><p>django restframework框架是在django的基础上又给我们提供了很多方便的功能，让我们可以更便捷基于django开发restful API</p><p>drf组件总流程：版本 -&gt; 认证 -&gt; 权限 -&gt; 限流</p><h3 id="_3-1-drf项目" tabindex="-1">3.1 drf项目 <a class="header-anchor" href="#_3-1-drf项目" aria-label="Permalink to &quot;3.1 drf项目&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pip install django</span></span>
<span class="line"><span>pip install djangorestframework</span></span></code></pre></div><h4 id="_3-1-1-核心配置" tabindex="-1">3.1.1 核心配置 <a class="header-anchor" href="#_3-1-1-核心配置" aria-label="Permalink to &quot;3.1.1 核心配置&quot;">​</a></h4><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">INSTALLED_APPS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;django.contrib.admin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;django.contrib.auth&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;django.contrib.contenttypes&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;django.contrib.sessions&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;django.contrib.messages&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;django.contrib.staticfiles&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;app01.apps.App01Config&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;rest_framework&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><h4 id="_3-1-2-路由" tabindex="-1">3.1.2 路由 <a class="header-anchor" href="#_3-1-2-路由" aria-label="Permalink to &quot;3.1.2 路由&quot;">​</a></h4><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> django.urls </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> path</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> api </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> views</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">urlpatterns </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    path(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;users/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, views.UserView.as_view()),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><h4 id="_3-1-3-视图" tabindex="-1">3.1.3 视图 <a class="header-anchor" href="#_3-1-3-视图" aria-label="Permalink to &quot;3.1.3 视图&quot;">​</a></h4><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rest_framework.views </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> APIView</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rest_framework.response </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Response</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">APIView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, request):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Response(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h4 id="_3-1-4-drf请求入口分析" tabindex="-1">3.1.4 drf请求入口分析 <a class="header-anchor" href="#_3-1-4-drf请求入口分析" aria-label="Permalink to &quot;3.1.4 drf请求入口分析&quot;">​</a></h4><p><img src="`+e+'" alt="image-20240501153451481"></p><h3 id="_3-2-request和参数" tabindex="-1">3.2 request和参数 <a class="header-anchor" href="#_3-2-request和参数" aria-label="Permalink to &quot;3.2 request和参数&quot;">​</a></h3><p>drf中的request和django中的request不一样，实际上是对django的request参数进行再封装</p><p><img src="'+h+'" alt="image-20240501121218606"></p><p>可以看到，在Django中request是<code>WSGIRequest</code>对象；而在drf中的request是<code>rest_framework.request.Request</code>对象</p><h4 id="_3-2-1-参数" tabindex="-1">3.2.1 参数 <a class="header-anchor" href="#_3-2-1-参数" aria-label="Permalink to &quot;3.2.1 参数&quot;">​</a></h4><ul><li><p>普通路由通过<code>self.kwargs</code>可以拿到请求的路由中传递的参数</p><p><img src="'+p+'" alt="image-20240501121814393"></p></li><li><p>含正则表达式的路由通过<code>self.args</code>拿到路由中传递的参数</p><p><img src="'+l+'" alt="image-20240501122300016"></p></li></ul><h4 id="_3-2-2-request对象" tabindex="-1">3.2.2 request对象 <a class="header-anchor" href="#_3-2-2-request对象" aria-label="Permalink to &quot;3.2.2 request对象&quot;">​</a></h4><h5 id="_1-源码分析" tabindex="-1">1.源码分析 <a class="header-anchor" href="#_1-源码分析" aria-label="Permalink to &quot;1.源码分析&quot;">​</a></h5><p>在路由入口<code>dispatch</code>中，有一个函数<code>initialize_request(request, *args, **kwargs)</code></p><p><img src="'+k+'" alt="image-20240501123746747"></p><p>再来看函数<code>initialize_request(request, *args, **kwargs)</code>具体干了些啥</p><p>这个函数将原来的Django中的request当作参数传入，返回的其实也是一个<code>Request</code>对象</p><p><img src="'+r+'" alt="image-20240501124034380"></p><p>而在<code>Request</code>对象源码中，将本来的Django的<code>request</code>赋值为<code>_request</code></p><p><img src="'+d+'" alt="image-20240501124519485"></p><p>同时在源码中，有一个<code>__getattr__</code>方法，这个方法的作用是，如果我访问了类中一个不存在的变量时，就会执行这个<code>__getattr__</code>方法，并返回</p><p><img src="'+o+'" alt="image-20240501124701677"></p><p>也就是说，我可以通过request._request.xxx获取到原本django中的request对象里面的值，</p><p>也可以通过request.xxx同时获取到drf和django两者request对象里面的值</p><p>request.xxx获取到django中request对象里面的值的原理是：当访问不到时，会执行<code>__getattr__</code>方法，通过反射的方法，此时相当于执行<code>request._request.xxx</code></p><p>流程图：</p><p><img src="'+E+'" alt="image-20210819150601089"></p><h5 id="_2-request对象获取值" tabindex="-1">2.request对象获取值 <a class="header-anchor" href="#_2-request对象获取值" aria-label="Permalink to &quot;2.request对象获取值&quot;">​</a></h5><p><img src="'+g+'" alt="image-20240501125645869"></p><h3 id="_3-3-认证" tabindex="-1">3.3 认证 <a class="header-anchor" href="#_3-3-认证" aria-label="Permalink to &quot;3.3 认证&quot;">​</a></h3><p>在开发API过程中，有些功能需要登录才能访问，有些无需登录。drf中的认证组件主要就是用来实现此功能。</p><h4 id="_3-3-0-认证组件的三种返回值" tabindex="-1">3.3.0 认证组件的三种返回值 <a class="header-anchor" href="#_3-3-0-认证组件的三种返回值" aria-label="Permalink to &quot;3.3.0 认证组件的三种返回值&quot;">​</a></h4><ul><li><p>认证成功，返回元组(user, auth)同时赋值给<code>request.user</code>和<code>request.auth</code></p><p>即<code>request.user = user, request.auth = auth</code></p></li><li><p>认证失败，抛出异常，返回错误信息</p></li><li><p>返回None</p></li></ul><p><strong>注意</strong>，认证组件中，如果是使用了多个认证类，会按照顺序逐一执行其中的<code>authenticate</code>方法：</p><ul><li>无论认证成功还是失败，都会有返回值且不为None，就不会走下面的认证类</li><li>只有前一个返回值为None时，才会执行下一个认证类</li><li>若是所有的认证类的返回值都为None，此时<code>request.user</code>和<code>request.auth</code>都为空，即匿名用户</li></ul><p>如果想匿名用户也可以访问视图，可以在<code>settings.py</code>中配置，有两种配置方法</p><ul><li><p>设为None</p><p><img src="'+c+'" alt="image-20240501140713358"></p></li><li><p>除了可以定义为None，也可以定义为一个函数，<code>request.user</code>和<code>request.auth</code>就分别对应两个函数的返回值</p><p><img src="'+y+'" alt="image-20240501141250592"></p></li></ul><h4 id="_3-3-1-单视图应用" tabindex="-1">3.3.1 单视图应用 <a class="header-anchor" href="#_3-3-1-单视图应用" aria-label="Permalink to &quot;3.3.1 单视图应用&quot;">​</a></h4><p><code>authentication_classes</code>是一个列表，可以同时应用多个认证组件</p><p><img src="'+u+'" alt="image-20240501133058471"></p><h4 id="_3-3-2-多视图应用" tabindex="-1">3.3.2 多视图应用 <a class="header-anchor" href="#_3-3-2-多视图应用" aria-label="Permalink to &quot;3.3.2 多视图应用&quot;">​</a></h4><p>此时，就需要用到drf的全局配置**(认证组件的类不能放在视图view.py中，会因为导入APIView导致循环引用)。**</p><p><img src="'+F+'" alt="image-20240501133711825"></p><h4 id="_3-3-3-单视图多视图结合" tabindex="-1">3.3.3 单视图多视图结合 <a class="header-anchor" href="#_3-3-3-单视图多视图结合" aria-label="Permalink to &quot;3.3.3 单视图多视图结合&quot;">​</a></h4><p>在drf中，默认优先去全局中读取，再去视图类中读取。</p><p>我们可以将个别视图类的<code>authentication_classes</code>列表置为空</p><p><img src="'+m+'" alt="image-20240501134846789"></p><h4 id="_3-3-4-源码分析" tabindex="-1">3.3.4 源码分析 <a class="header-anchor" href="#_3-3-4-源码分析" aria-label="Permalink to &quot;3.3.4 源码分析&quot;">​</a></h4><p><img src="'+q+'" alt="image-20240501162055511"></p><h3 id="_3-4-权限" tabindex="-1">3.4 权限 <a class="header-anchor" href="#_3-4-权限" aria-label="Permalink to &quot;3.4 权限&quot;">​</a></h3><p>权限组件相关配置同认证组件</p><h4 id="_3-4-0-认证组件的两种返回值" tabindex="-1">3.4.0 认证组件的两种返回值 <a class="header-anchor" href="#_3-4-0-认证组件的两种返回值" aria-label="Permalink to &quot;3.4.0 认证组件的两种返回值&quot;">​</a></h4><ul><li>有权限，返回True，程序正常进行</li><li>无权限，返回False，程序抛出异常</li></ul><h4 id="_3-4-1-单视图应用" tabindex="-1">3.4.1 单视图应用 <a class="header-anchor" href="#_3-4-1-单视图应用" aria-label="Permalink to &quot;3.4.1 单视图应用&quot;">​</a></h4><p><img src="'+_+'" alt="image-20240501154905696"></p><h4 id="_3-4-2-多视图应用" tabindex="-1">3.4.2 多视图应用 <a class="header-anchor" href="#_3-4-2-多视图应用" aria-label="Permalink to &quot;3.4.2 多视图应用&quot;">​</a></h4><p><img src="'+C+'" alt="image-20240501155055984"></p><h4 id="_3-4-3-单视图多视图结合" tabindex="-1">3.4.3 单视图多视图结合 <a class="header-anchor" href="#_3-4-3-单视图多视图结合" aria-label="Permalink to &quot;3.4.3 单视图多视图结合&quot;">​</a></h4><p>在drf中，默认优先去全局中读取，再去视图类中读取。</p><p>我们可以将个别视图类的<code>authentication_classes</code>列表置为空</p><p><img src="'+b+`" alt="image-20240501155423437"></p><h4 id="_3-4-4-多个认证组件关系" tabindex="-1">3.4.4 多个认证组件关系 <a class="header-anchor" href="#_3-4-4-多个认证组件关系" aria-label="Permalink to &quot;3.4.4 多个认证组件关系&quot;">​</a></h4><p>在drf开发中，如果有些接口必须同时满足：A条件、B条件、C条件。 有些接口只需要满足：A条件或B条件或C条件，此时就可以利用权限组件来编写这些条件。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rest_framework.views </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> APIView</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rest_framework.request </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Request</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rest_framework.response </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Response</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DemoView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">APIView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    permission_classes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [权限类A, 权限类B, 权限类C]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, request: Request):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Response({</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;status&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;data&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;OK&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><ul><li><p>且关系，默认支持：A条件 且 B条件 且 C条件，同时满足。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PermissionA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BasePermission</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;code&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1003</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;data&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;无权访问&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}	</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 自定义错误信息</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> has_permission</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, request, view):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> request.user.role </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> True</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> False</span></span></code></pre></div></li><li><p>或关系，自定义（方便扩展）（不要改源码，在视图函数内定义<code>check_permissions</code>方法）</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> APIView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> check_permissions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, request):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        Check if the request should be permitted.</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        Raises an appropriate exception if the request is not permitted.</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> permission </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.get_permissions():</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> permission.has_permission(request, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):	</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 只要有一个是Ture，就有权限</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.permission_denied(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            request,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">            message</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getattr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(permission, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;message&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">            code</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getattr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(permission, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;code&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        )</span></span></code></pre></div></li></ul><h4 id="_3-4-5-源码分析" tabindex="-1">3.4.5 源码分析 <a class="header-anchor" href="#_3-4-5-源码分析" aria-label="Permalink to &quot;3.4.5 源码分析&quot;">​</a></h4><p><img src="`+f+`" alt="image-20240501164709247"></p><h4 id="思考题1-自定义request对象" tabindex="-1">思考题1：自定义request对象 <a class="header-anchor" href="#思考题1-自定义request对象" aria-label="Permalink to &quot;思考题1：自定义request对象&quot;">​</a></h4><p>如何在开发过程中自定义request对象?</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LoginView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">APIView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> initialize_request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, request, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">args, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kwargs):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        Returns the initial request object.</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        parser_context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.get_parser_context(request)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Request(		</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 定义一个类，替换这里的request</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            request,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">            parsers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.get_parsers(),</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">            authenticators</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.get_authenticators(),</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">            negotiator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.get_content_negotiator(),</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">            parser_context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">parser_context</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        )</span></span></code></pre></div><h4 id="思考题2-drf中的认证、权限组件-与-django中的中间件有什么关系" tabindex="-1">思考题2：drf中的认证、权限组件 与 Django中的中间件有什么关系？ <a class="header-anchor" href="#思考题2-drf中的认证、权限组件-与-django中的中间件有什么关系" aria-label="Permalink to &quot;思考题2：drf中的认证、权限组件 与 Django中的中间件有什么关系？&quot;">​</a></h4><p>先执行中间件，然后走认证、权限组件（执行比中间件晚很多）</p><h3 id="_3-5-限流" tabindex="-1">3.5 限流 <a class="header-anchor" href="#_3-5-限流" aria-label="Permalink to &quot;3.5 限流&quot;">​</a></h3><p>开发过程中，如果某个接口不想让用户访问过于频繁，可以使用限流的机制</p><p>限流，限制用户访问频率，例如：用户1分钟最多访问100次 或者 短信验证码一天每天可以发送50次， 防止盗刷。</p><ul><li>对于匿名用户，使用用户IP作为唯一标识。</li><li>对于登录用户，使用用户信息主键、用户ID或名称作为唯一标识。</li></ul><p><img src="`+B+'" alt="image-20240502091541849"></p><h4 id="_3-5-0-限流组件的两种返回值" tabindex="-1">3.5.0 限流组件的两种返回值 <a class="header-anchor" href="#_3-5-0-限流组件的两种返回值" aria-label="Permalink to &quot;3.5.0 限流组件的两种返回值&quot;">​</a></h4><ul><li>返回True，表示当前限流类允许访问，继续执行后续的限流类。</li><li>返回False，表示当前限流类不允许访问，继续执行后续的限流类。所有的限流类执行完毕后，读取所有不允许的限流，并计算还需等待的时间。</li><li>抛出异常，表示当前限流类不允许访问，后续限流类不再执行。</li></ul><h4 id="_3-5-1-单视图应用" tabindex="-1">3.5.1 单视图应用 <a class="header-anchor" href="#_3-5-1-单视图应用" aria-label="Permalink to &quot;3.5.1 单视图应用&quot;">​</a></h4><p><img src="'+A+'" alt="image-20240502090507786"></p><h4 id="_3-5-2-多视图应用" tabindex="-1">3.5.2 多视图应用 <a class="header-anchor" href="#_3-5-2-多视图应用" aria-label="Permalink to &quot;3.5.2 多视图应用&quot;">​</a></h4><p><img src="'+D+'" alt="image-20240502104742468"></p><h4 id="_3-5-3-单视图多视图结合" tabindex="-1">3.5.3 单视图多视图结合 <a class="header-anchor" href="#_3-5-3-单视图多视图结合" aria-label="Permalink to &quot;3.5.3 单视图多视图结合&quot;">​</a></h4><p><img src="'+v+'" alt="image-20240502104821087"></p><h4 id="_3-5-4-限流组件配置方法" tabindex="-1">3.5.4 限流组件配置方法 <a class="header-anchor" href="#_3-5-4-限流组件配置方法" aria-label="Permalink to &quot;3.5.4 限流组件配置方法&quot;">​</a></h4><ul><li><p>基于drf提供的限流类</p><p><img src="'+x+'" alt="image-20240502091925735"></p></li><li><p>drf提供的限流类源码分析</p><p><img src="'+P+'" alt="image-20240502102914790"></p></li></ul><h4 id="_3-5-5-源码分析" tabindex="-1">3.5.5 源码分析 <a class="header-anchor" href="#_3-5-5-源码分析" aria-label="Permalink to &quot;3.5.5 源码分析&quot;">​</a></h4><p><img src="'+w+`" alt="image-20240502104319930"></p><p><strong>全局配置</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">REST_FRAMEWORK</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;DEFAULT_THROTTLE_CLASSES&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;xxx.xxx.xx.限流类&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ],</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;DEFAULT_THROTTLE_RATES&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;user&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;10/m&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;xx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;100/h&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_3-6-版本" tabindex="-1">3.6 版本 <a class="header-anchor" href="#_3-6-版本" aria-label="Permalink to &quot;3.6 版本&quot;">​</a></h3><p>在<code>restful</code>规范中要去，后端的<code>API</code>中需要体现版本。</p><h4 id="_3-6-1-get参数传递版本" tabindex="-1">3.6.1 GET参数传递版本 <a class="header-anchor" href="#_3-6-1-get参数传递版本" aria-label="Permalink to &quot;3.6.1 GET参数传递版本&quot;">​</a></h4><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rest_framework.versioning </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> QueryParameterVersioning</span></span></code></pre></div><ul><li><p>单视图应用</p><p><img src="`+R+`" alt="image-20240502105555121"></p></li><li><p>多视图应用</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># settings.py</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">REST_FRAMEWORK</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;VERSION_PARAM&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;version&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,	</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#定义URL中的参数值(一般都叫version)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;DEFAULT_VERSION&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;v1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,	</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#默认version,可以自定义</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;ALLOWED_VERSIONS&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;v1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;v2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;v3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;DEFAULT_VERSIONING_CLASS&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;rest_framework.versioning.QueryParameterVersioning&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><img src="`+V+'" alt="image-20240502105901409"></p></li></ul><p>源码执行流程：</p><p><img src="'+T+'" alt="image-20210820105543193"></p><h4 id="_3-6-2-url路径传递版本" tabindex="-1">3.6.2 URL路径传递版本（*） <a class="header-anchor" href="#_3-6-2-url路径传递版本" aria-label="Permalink to &quot;3.6.2 URL路径传递版本（*）&quot;">​</a></h4><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rest_framework.versioning </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> URLPathVersioning</span></span></code></pre></div><p><img src="'+j+'" alt="image-20240502110650845"></p><h4 id="_3-6-3-请求头传递版本" tabindex="-1">3.6.3 请求头传递版本 <a class="header-anchor" href="#_3-6-3-请求头传递版本" aria-label="Permalink to &quot;3.6.3 请求头传递版本&quot;">​</a></h4><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rest_framework.versioning </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AcceptHeaderVersioning</span></span></code></pre></div><p><img src="'+S+'" alt="image-20240502110937054"></p><h4 id="_3-6-4-源码分析" tabindex="-1">3.6.4 源码分析 <a class="header-anchor" href="#_3-6-4-源码分析" aria-label="Permalink to &quot;3.6.4 源码分析&quot;">​</a></h4><p><img src="'+L+'" alt="image-20240502113926511"></p><h4 id="_3-6-5-反向生成url" tabindex="-1">3.6.5 反向生成URL <a class="header-anchor" href="#_3-6-5-反向生成url" aria-label="Permalink to &quot;3.6.5 反向生成URL&quot;">​</a></h4><p>在每个版本处理的类中还定义了<code>reverse</code>方法，他是用来反向生成URL并携带相关的的版本信息用的，例如：</p><p><img src="'+N+'" alt="image-20210820105543193"></p><p><img src="'+I+'" alt="image-20210820112152615"></p>',126),J=[O];function G(z,Q,W,H,M,X){return a(),i("div",null,J)}const Z=s(U,[["render",G]]);export{K as __pageData,Z as default};

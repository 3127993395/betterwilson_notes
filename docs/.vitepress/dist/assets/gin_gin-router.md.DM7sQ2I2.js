import{_ as s,c as i,o as a,a3 as n}from"./chunks/framework.D5qxx6u8.js";const p="/assets/1358743725.DgV1Mq1R.png",t="/assets/image-20241019103933787.CDly9Gvv.png",F=JSON.parse('{"title":"Gin路由","description":"","frontmatter":{},"headers":[],"relativePath":"gin/gin-router.md","filePath":"gin/gin-router.md"}'),l={name:"gin/gin-router.md"},h=n('<h1 id="gin路由" tabindex="-1">Gin路由 <a class="header-anchor" href="#gin路由" aria-label="Permalink to &quot;Gin路由&quot;">​</a></h1><h2 id="radix-tree" tabindex="-1">Radix Tree <a class="header-anchor" href="#radix-tree" aria-label="Permalink to &quot;Radix Tree&quot;">​</a></h2><p>gin框架使用的是定制版本的<a href="https://github.com/julienschmidt/httprouter" target="_blank" rel="noreferrer">httprouter</a>，其路由的原理是使用了Radix Tree（基数树），也就是具有公共前缀的节点共享一个公共父节点</p><p>Trie，被称为前缀树或字典树，是一种有序树，其中的键通常是单词和字符串，所以又有人叫它单词查找树。</p><p>它是一颗多叉树，即每个节点分支数量可能为多个，根节点不包含字符串。</p><p>从根节点到某一节点，路径上经过的字符连接起来，为该节点对应的字符串。</p><p>除根节点外，每一个节点只包含一个字符。</p><p>每个节点的所有子节点包含的字符都不相同。</p><p>优点：利用字符串公共前缀来减少查询时间，减少无谓的字符串比较</p><p>以下为一个简单的前缀树（Perfix Tree）</p><p><img src="'+p+`" alt="1358743725"></p><p>Radix Tree可以让我们很方便的由路由得到其对应的路由树</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">r </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gin.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">r.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, func1)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">r.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/search/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, func2)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">r.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/support/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, func3)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">r.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/blog/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, func4)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">r.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/blog/:post/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, func5)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">r.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/about-us/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, func6)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">r.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/about-us/team/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, func7)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">r.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/contact/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, func8)</span></span></code></pre></div><p>路由树：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Priority   Path             Handle</span></span>
<span class="line"><span>9          \\                *&lt;1&gt;</span></span>
<span class="line"><span>3          ├s               nil</span></span>
<span class="line"><span>2          |├earch\\         *&lt;2&gt;</span></span>
<span class="line"><span>1          |└upport\\        *&lt;3&gt;</span></span>
<span class="line"><span>2          ├blog\\           *&lt;4&gt;</span></span>
<span class="line"><span>1          |    └:post      nil</span></span>
<span class="line"><span>1          |         └\\     *&lt;5&gt;</span></span>
<span class="line"><span>2          ├about-us\\       *&lt;6&gt;</span></span>
<span class="line"><span>1          |        └team\\  *&lt;7&gt;</span></span>
<span class="line"><span>1          └contact\\        *&lt;8&gt;</span></span></code></pre></div><p>这样当我们的路由访问符合上述的规则时，就可以统一执行后面的Handle函数</p><p>路由器会为每一个方法（<code>GET</code>，<code>POST</code>等）分别管理一棵单独的树</p><p>同时，每个树级别上的子节点都按Priority(优先级)排序，其中优先级（最左列）就是在子节点(子节点、子子节点等等)中注册的句柄（函数）的数量。这样做有两个好处:</p><ul><li><p>首先优先匹配被大多数路由路径包含的节点，这样可以让尽可能多的路由快速被定位</p></li><li><p>类似于成本补偿：最长的路径可以被优先匹配</p><p>补偿体现在最长的路径需要花费更长的时间来定位，如果最长路径的节点能被优先匹配（即每次拿子节点都命中），那么路由匹配所花的时间不一定比短路径的路由长</p></li></ul><h2 id="路由入口" tabindex="-1">路由入口 <a class="header-anchor" href="#路由入口" aria-label="Permalink to &quot;路由入口&quot;">​</a></h2><p>以下是一个简单的gin程序</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">github.com/gin-gonic/gin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">net/http</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	r </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gin.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	r.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">c</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		c.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(http.StatusOK, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ok&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	r.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>当我们运行一个gin程序时，<code>r.run()</code>将会首先加载路由启动，我们从这里开始看</p><p>gin路由源码分析图</p><p><img src="`+t+'" alt="image-20241019103933787"></p>',25),k=[h];function e(E,r,g,d,o,c){return a(),i("div",null,k)}const u=s(l,[["render",e]]);export{F as __pageData,u as default};
